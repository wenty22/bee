{"pageProps":{"doc":{"title":"Switch","body":{"raw":"\n# Switch\n\n## Import\n\n```jsx live=false\nimport { Switch } from '@totejs/uikit';\n```\n\n## Usage\n\n```jsx\n<FormControl>\n  <FormLabel htmlFor=\"email-alerts\">Enable email alerts?</FormLabel>\n  <Switch id=\"email-alerts\" />\n</FormControl>\n```\n\n## Colors\n\n```jsx\nfunction Example() {\n  return (\n    <HStack>\n      {['primary', 'success', 'warning', 'danger'].map((item) => (\n        <Switch colorScheme={item} isChecked key={item} />\n      ))}\n    </HStack>\n  );\n}\n```\n\n## Status\n\n```jsx\n<FormControl>\n  <FormLabel htmlFor=\"unChecked\">unChecked:</FormLabel>\n  <Switch id=\"unChecked\" isChecked={false} />\n\n  <FormLabel htmlFor=\"isChecked\">isChecked:</FormLabel>\n  <Switch id=\"isChecked\" isChecked />\n\n  <FormLabel htmlFor=\"isDisabled\">isDisabled:</FormLabel>\n  <Switch id=\"isDisabled\" isDisabled defaultChecked />\n\n  <FormLabel htmlFor=\"isInvalid\">isInvalid:</FormLabel>\n  <Switch id=\"isInvalid\" isInvalid />\n\n  <FormLabel htmlFor=\"isReadOnly\">isReadOnly:</FormLabel>\n  <Switch id=\"isReadOnly\" isReadOnly />\n</FormControl>\n```\n\n## Props\n\n<PropsTable\n  data={[\n    {\n      name: 'colorShceme',\n      required: false,\n      type: '\"primary\" | \"success\" | \"danger\" | \"warning\"',\n      default: '\"primary\"',\n      desc: 'The outline color of switch',\n    },\n    {\n      name: 'isChecked',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: `If true, the checkbox will be checked. You'll need to pass onChange to update its value (since it is now controlled)`,\n    },\n    {\n      name: 'defaultChecked',\n      required: false,\n      type: 'boolean',\n      default: '',\n      desc: 'If true, the checkbox will be initially checked.',\n    },\n    {\n      name: 'onChange',\n      required: false,\n      type: '((event: ChangeEvent<HTMLInputElement>) => void)',\n      desc: 'The callback invoked when the checked state of the Checkbox changes.',\n    },\n    {\n      name: 'onFocus',\n      required: false,\n      type: '((event: FocusEvent<HTMLInputElement, Element>) => void)',\n      desc: 'The callback invoked when the checkbox is focused',\n    },\n    {\n      name: 'isDisabled',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the switch will be disabled.',\n    },\n    {\n      name: 'isInvalid',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the switch will be invalid.',\n    },\n    {\n      name: 'isReadOnly',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the switch will be readonly.',\n    },\n  ]}\n/>\n","code":"var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var p=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),k=(n,e)=>{for(var t in e)i(n,t,{get:e[t],enumerable:!0})},o=(n,e,t,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!b.call(n,a)&&a!==t&&i(n,a,{get:()=>e[a],enumerable:!(r=m(e,a))||r.enumerable});return n};var w=(n,e,t)=>(t=n!=null?h(f(n)):{},o(e||!n||!n.__esModule?i(t,\"default\",{value:n,enumerable:!0}):t,n)),F=n=>o(i({},\"__esModule\",{value:!0}),n);var c=p((S,s)=>{s.exports=_jsx_runtime});var v={};k(v,{default:()=>y,frontmatter:()=>g});var l=w(c()),g={title:\"Switch\"};function d(n){let e=Object.assign({h1:\"h1\",h2:\"h2\",pre:\"pre\",code:\"code\"},n.components),{PropsTable:t}=e;return t||x(\"PropsTable\",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.h1,{children:\"Switch\"}),`\n`,(0,l.jsx)(e.h2,{children:\"Import\"}),`\n`,(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { Switch } from '@totejs/uikit';\n`})}),`\n`,(0,l.jsx)(e.h2,{children:\"Usage\"}),`\n`,(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:\"language-jsx\",children:`<FormControl>\n  <FormLabel htmlFor=\"email-alerts\">Enable email alerts?</FormLabel>\n  <Switch id=\"email-alerts\" />\n</FormControl>\n`})}),`\n`,(0,l.jsx)(e.h2,{children:\"Colors\"}),`\n`,(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  return (\n    <HStack>\n      {['primary', 'success', 'warning', 'danger'].map((item) => (\n        <Switch colorScheme={item} isChecked key={item} />\n      ))}\n    </HStack>\n  );\n}\n`})}),`\n`,(0,l.jsx)(e.h2,{children:\"Status\"}),`\n`,(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:\"language-jsx\",children:`<FormControl>\n  <FormLabel htmlFor=\"unChecked\">unChecked:</FormLabel>\n  <Switch id=\"unChecked\" isChecked={false} />\n\n  <FormLabel htmlFor=\"isChecked\">isChecked:</FormLabel>\n  <Switch id=\"isChecked\" isChecked />\n\n  <FormLabel htmlFor=\"isDisabled\">isDisabled:</FormLabel>\n  <Switch id=\"isDisabled\" isDisabled defaultChecked />\n\n  <FormLabel htmlFor=\"isInvalid\">isInvalid:</FormLabel>\n  <Switch id=\"isInvalid\" isInvalid />\n\n  <FormLabel htmlFor=\"isReadOnly\">isReadOnly:</FormLabel>\n  <Switch id=\"isReadOnly\" isReadOnly />\n</FormControl>\n`})}),`\n`,(0,l.jsx)(e.h2,{children:\"Props\"}),`\n`,(0,l.jsx)(t,{data:[{name:\"colorShceme\",required:!1,type:'\"primary\" | \"success\" | \"danger\" | \"warning\"',default:'\"primary\"',desc:\"The outline color of switch\"},{name:\"isChecked\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the checkbox will be checked. You'll need to pass onChange to update its value (since it is now controlled)\"},{name:\"defaultChecked\",required:!1,type:\"boolean\",default:\"\",desc:\"If true, the checkbox will be initially checked.\"},{name:\"onChange\",required:!1,type:\"((event: ChangeEvent<HTMLInputElement>) => void)\",desc:\"The callback invoked when the checked state of the Checkbox changes.\"},{name:\"onFocus\",required:!1,type:\"((event: FocusEvent<HTMLInputElement, Element>) => void)\",desc:\"The callback invoked when the checkbox is focused\"},{name:\"isDisabled\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the switch will be disabled.\"},{name:\"isInvalid\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the switch will be invalid.\"},{name:\"isReadOnly\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the switch will be readonly.\"}]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,l.jsx)(e,Object.assign({},n,{children:(0,l.jsx)(d,n)})):d(n)}var y=C;function x(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return F(v);})();\n;return Component;"},"_id":"docs/components/forms/switch.mdx","_raw":{"sourceFilePath":"docs/components/forms/switch.mdx","sourceFileName":"switch.mdx","sourceFileDir":"docs/components/forms","contentType":"mdx","flattenedPath":"docs/components/forms/switch"},"type":"Doc","slug":"/docs/components/forms/switch"}},"__N_SSG":true}