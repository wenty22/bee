{"pageProps":{"doc":{"title":"Button","body":{"raw":"\n# Button\n\n## Import\n\n```jsx live=false\nimport { Button } from '@totejs/uikit';\n```\n\n## Usage\n\n```jsx\n<Button>Button</Button>\n```\n\n## Sizes\n\n```jsx\n<Wrap>\n  {/* height = 24px */}\n  <Button size=\"sm\">Small Button</Button>\n\n  {/* height = 40px */}\n  <Button size=\"md\">Medium Button</Button>\n\n  {/* height = 50px */}\n  <Button size=\"lg\">Large Button</Button>\n</Wrap>\n```\n\n## Variants\n\n```jsx\n<Wrap>\n  <Button variant=\"scene\">Small Button</Button>\n  <Button variant=\"scene\" colorScheme=\"warning\">\n    Scene Button\n  </Button>\n  <Button variant=\"brand\" bg=\"#00ACEE\" color=\"#FFF\">\n    Brand Button\n  </Button>\n  <Button variant=\"second\">Second Button</Button>\n  <Button variant=\"ghost\">Ghost Button</Button>\n  <Button variant=\"text\">Text Button</Button>\n  <Button variant=\"link\">Link Button</Button>\n</Wrap>\n```\n\n## Scene Colors\n\nEffective only when `variant=\"scene\"`\n\n```jsx\n<Wrap>\n  <Button colorScheme=\"success\">success</Button>\n  <Button colorScheme=\"danger\">danger</Button>\n  <Button colorScheme=\"warning\">warning</Button>\n  <Button colorScheme=\"primary\">primary</Button>\n</Wrap>\n```\n\n## With Icons\n\n```jsx\n<>\n  <Wrap>\n    <Button size=\"sm\" leftIcon={<ValidatorsIcon size=\"md\" />}>\n      Small Button\n    </Button>\n    <Button size=\"md\" leftIcon={<ValidatorsIcon />}>\n      Medium Button\n    </Button>\n    <Button size=\"lg\" leftIcon={<ValidatorsIcon />}>\n      Large Button\n    </Button>\n  </Wrap>\n\n  <Wrap>\n    <Button size=\"sm\" rightIcon={<GoIcon size=\"md\" />}>\n      Small Button\n    </Button>\n    <Button size=\"md\" rightIcon={<GoIcon />}>\n      Medium Button\n    </Button>\n    <Button size=\"lg\" rightIcon={<GoIcon />}>\n      Large Button\n    </Button>\n  </Wrap>\n</>\n```\n\n## Status\n\n### Disabled\n\n```jsx\n<Wrap>\n  <Button variant=\"scene\" isDisabled>\n    Small Button\n  </Button>\n  <Button variant=\"scene\" colorScheme=\"warning\" isDisabled>\n    Scene Button\n  </Button>\n  <Button variant=\"brand\" bg=\"#00ACEE\" color=\"#FFF\" isDisabled>\n    Brand Button\n  </Button>\n  <Button variant=\"second\" isDisabled>\n    Second Button\n  </Button>\n  <Button variant=\"ghost\" isDisabled>\n    Ghost Button\n  </Button>\n  <Button variant=\"text\" isDisabled>\n    Text Button\n  </Button>\n  <Button variant=\"link\" isDisabled>\n    Link Button\n  </Button>\n</Wrap>\n```\n\n### Loading\n\n```jsx\n<Wrap>\n  <Button variant=\"scene\" isLoading>\n    Small Button\n  </Button>\n  <Button variant=\"scene\" colorScheme=\"warning\" isLoading>\n    Scene Button\n  </Button>\n  <Button variant=\"brand\" bg=\"#00ACEE\" color=\"#FFF\" isLoading>\n    Brand Button\n  </Button>\n  <Button variant=\"second\" isLoading>\n    Second Button\n  </Button>\n  <Button variant=\"ghost\" isLoading>\n    Ghost Button\n  </Button>\n</Wrap>\n```\n\n## as prop\n\n```jsx\n<Button variant=\"link\" as=\"a\" href=\"#\" target=\"_blank\">\n  Link\n</Button>\n```\n\n## Props\n\n<PropsTable\n  data={[\n    {\n      name: 'colorShceme',\n      required: false,\n      type: '\"primary\" | \"success\" | \"danger\" | \"warning\"',\n      default: '\"primary\"',\n      desc: 'When `variant=\"scene\"`, you can change the skin of the button',\n    },\n    {\n      name: 'size',\n      required: false,\n      type: 'sm | md | lg',\n      default: 'lg',\n      desc: '',\n    },\n    {\n      name: 'isDisabled',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the button will be disabled.',\n    },\n    {\n      name: 'isFullWidth',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the button will take up the full width of its container.',\n    },\n    {\n      name: 'isLoading',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: '',\n    },\n    {\n      name: 'leftIcon',\n      required: false,\n      type: 'React.ReactElement',\n      default: '',\n      desc: \"If added, the button will show an icon before the button's label.\",\n    },\n    {\n      name: 'rightIcon',\n      required: false,\n      type: 'React.ReactElement',\n      default: '',\n      desc: \"If added, the button will show an icon after the button's label.\",\n    },\n    {\n      name: 'loadingText',\n      required: false,\n      type: 'string',\n      default: 'Loading...',\n      desc: 'The label to show in the button when isLoading is true',\n    },\n    {\n      name: 'variant',\n      required: false,\n      type: 'scene | brand | second | ghost | text | link',\n      default: 'scene',\n      desc: '',\n    },\n    {\n      name: 'type',\n      required: false,\n      type: 'submit | reset | button',\n      default: '',\n      desc: '',\n    },\n  ]}\n/>\n","code":"var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var p=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),f=(e,n)=>{for(var o in n)r(e,o,{get:n[o],enumerable:!0})},s=(e,n,o,i)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let a of h(n))!m.call(e,a)&&a!==o&&r(e,a,{get:()=>n[a],enumerable:!(i=B(n,a))||i.enumerable});return e};var b=(e,n,o)=>(o=e!=null?d(g(e)):{},s(n||!e||!e.__esModule?r(o,\"default\",{value:e,enumerable:!0}):o,e)),x=e=>s(r({},\"__esModule\",{value:!0}),e);var l=p((W,u)=>{u.exports=_jsx_runtime});var w={};f(w,{default:()=>y,frontmatter:()=>v});var t=b(l()),v={title:\"Button\"};function c(e){let n=Object.assign({h1:\"h1\",h2:\"h2\",pre:\"pre\",code:\"code\",p:\"p\",h3:\"h3\"},e.components),{PropsTable:o}=n;return o||I(\"PropsTable\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:\"Button\"}),`\n`,(0,t.jsx)(n.h2,{children:\"Import\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`import { Button } from '@totejs/uikit';\n`})}),`\n`,(0,t.jsx)(n.h2,{children:\"Usage\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-jsx\",children:`<Button>Button</Button>\n`})}),`\n`,(0,t.jsx)(n.h2,{children:\"Sizes\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-jsx\",children:`<Wrap>\n  {/* height = 24px */}\n  <Button size=\"sm\">Small Button</Button>\n\n  {/* height = 40px */}\n  <Button size=\"md\">Medium Button</Button>\n\n  {/* height = 50px */}\n  <Button size=\"lg\">Large Button</Button>\n</Wrap>\n`})}),`\n`,(0,t.jsx)(n.h2,{children:\"Variants\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-jsx\",children:`<Wrap>\n  <Button variant=\"scene\">Small Button</Button>\n  <Button variant=\"scene\" colorScheme=\"warning\">\n    Scene Button\n  </Button>\n  <Button variant=\"brand\" bg=\"#00ACEE\" color=\"#FFF\">\n    Brand Button\n  </Button>\n  <Button variant=\"second\">Second Button</Button>\n  <Button variant=\"ghost\">Ghost Button</Button>\n  <Button variant=\"text\">Text Button</Button>\n  <Button variant=\"link\">Link Button</Button>\n</Wrap>\n`})}),`\n`,(0,t.jsx)(n.h2,{children:\"Scene Colors\"}),`\n`,(0,t.jsxs)(n.p,{children:[\"Effective only when \",(0,t.jsx)(n.code,{children:'variant=\"scene\"'})]}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-jsx\",children:`<Wrap>\n  <Button colorScheme=\"success\">success</Button>\n  <Button colorScheme=\"danger\">danger</Button>\n  <Button colorScheme=\"warning\">warning</Button>\n  <Button colorScheme=\"primary\">primary</Button>\n</Wrap>\n`})}),`\n`,(0,t.jsx)(n.h2,{children:\"With Icons\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-jsx\",children:`<>\n  <Wrap>\n    <Button size=\"sm\" leftIcon={<ValidatorsIcon size=\"md\" />}>\n      Small Button\n    </Button>\n    <Button size=\"md\" leftIcon={<ValidatorsIcon />}>\n      Medium Button\n    </Button>\n    <Button size=\"lg\" leftIcon={<ValidatorsIcon />}>\n      Large Button\n    </Button>\n  </Wrap>\n\n  <Wrap>\n    <Button size=\"sm\" rightIcon={<GoIcon size=\"md\" />}>\n      Small Button\n    </Button>\n    <Button size=\"md\" rightIcon={<GoIcon />}>\n      Medium Button\n    </Button>\n    <Button size=\"lg\" rightIcon={<GoIcon />}>\n      Large Button\n    </Button>\n  </Wrap>\n</>\n`})}),`\n`,(0,t.jsx)(n.h2,{children:\"Status\"}),`\n`,(0,t.jsx)(n.h3,{children:\"Disabled\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-jsx\",children:`<Wrap>\n  <Button variant=\"scene\" isDisabled>\n    Small Button\n  </Button>\n  <Button variant=\"scene\" colorScheme=\"warning\" isDisabled>\n    Scene Button\n  </Button>\n  <Button variant=\"brand\" bg=\"#00ACEE\" color=\"#FFF\" isDisabled>\n    Brand Button\n  </Button>\n  <Button variant=\"second\" isDisabled>\n    Second Button\n  </Button>\n  <Button variant=\"ghost\" isDisabled>\n    Ghost Button\n  </Button>\n  <Button variant=\"text\" isDisabled>\n    Text Button\n  </Button>\n  <Button variant=\"link\" isDisabled>\n    Link Button\n  </Button>\n</Wrap>\n`})}),`\n`,(0,t.jsx)(n.h3,{children:\"Loading\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-jsx\",children:`<Wrap>\n  <Button variant=\"scene\" isLoading>\n    Small Button\n  </Button>\n  <Button variant=\"scene\" colorScheme=\"warning\" isLoading>\n    Scene Button\n  </Button>\n  <Button variant=\"brand\" bg=\"#00ACEE\" color=\"#FFF\" isLoading>\n    Brand Button\n  </Button>\n  <Button variant=\"second\" isLoading>\n    Second Button\n  </Button>\n  <Button variant=\"ghost\" isLoading>\n    Ghost Button\n  </Button>\n</Wrap>\n`})}),`\n`,(0,t.jsx)(n.h2,{children:\"as prop\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-jsx\",children:`<Button variant=\"link\" as=\"a\" href=\"#\" target=\"_blank\">\n  Link\n</Button>\n`})}),`\n`,(0,t.jsx)(n.h2,{children:\"Props\"}),`\n`,(0,t.jsx)(o,{data:[{name:\"colorShceme\",required:!1,type:'\"primary\" | \"success\" | \"danger\" | \"warning\"',default:'\"primary\"',desc:'When `variant=\"scene\"`, you can change the skin of the button'},{name:\"size\",required:!1,type:\"sm | md | lg\",default:\"lg\",desc:\"\"},{name:\"isDisabled\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the button will be disabled.\"},{name:\"isFullWidth\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the button will take up the full width of its container.\"},{name:\"isLoading\",required:!1,type:\"boolean\",default:!1,desc:\"\"},{name:\"leftIcon\",required:!1,type:\"React.ReactElement\",default:\"\",desc:\"If added, the button will show an icon before the button's label.\"},{name:\"rightIcon\",required:!1,type:\"React.ReactElement\",default:\"\",desc:\"If added, the button will show an icon after the button's label.\"},{name:\"loadingText\",required:!1,type:\"string\",default:\"Loading...\",desc:\"The label to show in the button when isLoading is true\"},{name:\"variant\",required:!1,type:\"scene | brand | second | ghost | text | link\",default:\"scene\",desc:\"\"},{name:\"type\",required:!1,type:\"submit | reset | button\",default:\"\",desc:\"\"}]})]})}function S(e={}){let{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(c,e)})):c(e)}var y=S;function I(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return x(w);})();\n;return Component;"},"_id":"docs/components/forms/button.mdx","_raw":{"sourceFilePath":"docs/components/forms/button.mdx","sourceFileName":"button.mdx","sourceFileDir":"docs/components/forms","contentType":"mdx","flattenedPath":"docs/components/forms/button"},"type":"Doc","slug":"/docs/components/forms/button"}},"__N_SSG":true}