{"pageProps":{"doc":{"title":"Input","body":{"raw":"\n# Input\n\n## Import\n\n```jsx live=false\nimport { Input } from '@totejs/uikit';\n```\n\n## Usage\n\n```jsx\n<Input placeholder=\"Please enter...\" />\n```\n\n## Sizes\n\n```jsx\n<VStack>\n  {/* height = 24px */}\n  <Input size=\"sm\" placeholder=\"small size\" />\n\n  {/* height = 40px */}\n  <Input size=\"md\" placeholder=\"medium size\" />\n\n  {/* height = 50px */}\n  <Input size=\"lg\" placeholder=\"Large size\" />\n</VStack>\n```\n\n## Colors\n\n```jsx\nfunction Example() {\n  return (\n    <VStack>\n      {['primary', 'success', 'warning', 'danger'].map((item) => (\n        <Input colorScheme={item} placeholder={item} key={item} />\n      ))}\n    </VStack>\n  );\n}\n```\n\n## Variants\n\nSo far, we only have one variant, we will add more variants in the future.\n\n```jsx\n<Input variant=\"filled\" />\n```\n\n## Status\n\n### isReadOnly\n\n```jsx\n<Input defaultValue=\"some text...\" isReadOnly />\n```\n\n### isDisabled\n\n```jsx\n<Input defaultValue=\"some text...\" isDisabled />\n```\n\n### isInvalid\n\n```jsx\n<Input defaultValue=\"some text...\" isInvalid />\n```\n\n## With Icons\n\n```jsx\n<VStack>\n  <InputGroup>\n    <InputLeftElement>\n      <ValidatorsIcon size=\"md\" />\n    </InputLeftElement>\n    <Input />\n  </InputGroup>\n\n  <InputGroup>\n    <Input />\n    <InputRightElement>\n      <QrcodeIcon size=\"md\" />\n    </InputRightElement>\n  </InputGroup>\n\n  <InputGroup>\n    <InputLeftElement>\n      <ValidatorsIcon size=\"md\" />\n    </InputLeftElement>\n    <Input />\n    <InputRightElement w=\"auto\">\n      <QrcodeIcon size=\"md\" />\n    </InputRightElement>\n  </InputGroup>\n\n  <InputGroup size=\"sm\">\n    <InputLeftElement>\n      <ValidatorsIcon size=\"md\" />\n    </InputLeftElement>\n    <Input />\n  </InputGroup>\n\n  <InputGroup size=\"sm\">\n    <Input />\n    <InputRightElement>\n      <QrcodeIcon size=\"md\" />\n    </InputRightElement>\n  </InputGroup>\n\n  <InputGroup size=\"sm\">\n    <InputLeftElement>\n      <ValidatorsIcon size=\"md\" />\n    </InputLeftElement>\n    <Input />\n    <InputRightElement w=\"auto\">\n      <Tooltip content=\"Some text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text\">\n        <QrcodeIcon size=\"md\" _hover={{ color: 'scene.primary.active' }} />\n      </Tooltip>\n    </InputRightElement>\n  </InputGroup>\n</VStack>\n```\n\n## Props\n\n<PropsTable\n  data={[\n    {\n      name: 'colorShceme',\n      required: false,\n      type: '\"primary\" | \"success\" | \"danger\" | \"warning\"',\n      default: '\"primary\"',\n      desc: 'The outline color of input',\n    },\n    {\n      name: 'size',\n      required: false,\n      type: 'sm | md | lg',\n      default: 'lg',\n      desc: '',\n    },\n    {\n      name: 'variant',\n      required: false,\n      type: 'filled',\n      default: 'filled',\n      desc: '',\n    },\n    {\n      name: 'value',\n      required: false,\n      type: 'string',\n      default: '',\n    },\n    {\n      name: 'defaultValue',\n      required: false,\n      type: 'string',\n      default: '',\n    },\n    {\n      name: 'onChange',\n      required: false,\n    },\n    {\n      name: 'isDisabled',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the input will be disabled.',\n    },\n    {\n      name: 'isInvalid',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the form control will be invalid.',\n    },\n    {\n      name: 'isReadOnly',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the form control will be readonly.',\n    },\n    {\n      name: 'isFullWidth',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the input will take up the full width of its container.',\n    },\n  ]}\n/>\n","code":"var Component=(()=>{var c=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var l in e)r(t,l,{get:e[l],enumerable:!0})},s=(t,e,l,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!I.call(t,a)&&a!==l&&r(t,a,{get:()=>e[a],enumerable:!(i=p(e,a))||i.enumerable});return t};var g=(t,e,l)=>(l=t!=null?c(h(t)):{},s(e||!t||!t.__esModule?r(l,\"default\",{value:t,enumerable:!0}):l,t)),y=t=>s(r({},\"__esModule\",{value:!0}),t);var d=f((v,o)=>{o.exports=_jsx_runtime});var w={};x(w,{default:()=>j,frontmatter:()=>z});var n=g(d()),z={title:\"Input\"};function u(t){let e=Object.assign({h1:\"h1\",h2:\"h2\",pre:\"pre\",code:\"code\",p:\"p\",h3:\"h3\"},t.components),{PropsTable:l}=e;return l||b(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Input\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { Input } from '@totejs/uikit';\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Input placeholder=\"Please enter...\" />\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Sizes\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<VStack>\n  {/* height = 24px */}\n  <Input size=\"sm\" placeholder=\"small size\" />\n\n  {/* height = 40px */}\n  <Input size=\"md\" placeholder=\"medium size\" />\n\n  {/* height = 50px */}\n  <Input size=\"lg\" placeholder=\"Large size\" />\n</VStack>\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Colors\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  return (\n    <VStack>\n      {['primary', 'success', 'warning', 'danger'].map((item) => (\n        <Input colorScheme={item} placeholder={item} key={item} />\n      ))}\n    </VStack>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Variants\"}),`\n`,(0,n.jsx)(e.p,{children:\"So far, we only have one variant, we will add more variants in the future.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Input variant=\"filled\" />\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Status\"}),`\n`,(0,n.jsx)(e.h3,{children:\"isReadOnly\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Input defaultValue=\"some text...\" isReadOnly />\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"isDisabled\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Input defaultValue=\"some text...\" isDisabled />\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"isInvalid\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Input defaultValue=\"some text...\" isInvalid />\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"With Icons\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<VStack>\n  <InputGroup>\n    <InputLeftElement>\n      <ValidatorsIcon size=\"md\" />\n    </InputLeftElement>\n    <Input />\n  </InputGroup>\n\n  <InputGroup>\n    <Input />\n    <InputRightElement>\n      <QrcodeIcon size=\"md\" />\n    </InputRightElement>\n  </InputGroup>\n\n  <InputGroup>\n    <InputLeftElement>\n      <ValidatorsIcon size=\"md\" />\n    </InputLeftElement>\n    <Input />\n    <InputRightElement w=\"auto\">\n      <QrcodeIcon size=\"md\" />\n    </InputRightElement>\n  </InputGroup>\n\n  <InputGroup size=\"sm\">\n    <InputLeftElement>\n      <ValidatorsIcon size=\"md\" />\n    </InputLeftElement>\n    <Input />\n  </InputGroup>\n\n  <InputGroup size=\"sm\">\n    <Input />\n    <InputRightElement>\n      <QrcodeIcon size=\"md\" />\n    </InputRightElement>\n  </InputGroup>\n\n  <InputGroup size=\"sm\">\n    <InputLeftElement>\n      <ValidatorsIcon size=\"md\" />\n    </InputLeftElement>\n    <Input />\n    <InputRightElement w=\"auto\">\n      <Tooltip content=\"Some text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text\">\n        <QrcodeIcon size=\"md\" _hover={{ color: 'scene.primary.active' }} />\n      </Tooltip>\n    </InputRightElement>\n  </InputGroup>\n</VStack>\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Props\"}),`\n`,(0,n.jsx)(l,{data:[{name:\"colorShceme\",required:!1,type:'\"primary\" | \"success\" | \"danger\" | \"warning\"',default:'\"primary\"',desc:\"The outline color of input\"},{name:\"size\",required:!1,type:\"sm | md | lg\",default:\"lg\",desc:\"\"},{name:\"variant\",required:!1,type:\"filled\",default:\"filled\",desc:\"\"},{name:\"value\",required:!1,type:\"string\",default:\"\"},{name:\"defaultValue\",required:!1,type:\"string\",default:\"\"},{name:\"onChange\",required:!1},{name:\"isDisabled\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the input will be disabled.\"},{name:\"isInvalid\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the form control will be invalid.\"},{name:\"isReadOnly\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the form control will be readonly.\"},{name:\"isFullWidth\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the input will take up the full width of its container.\"}]})]})}function E(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(u,t)})):u(t)}var j=E;function b(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return y(w);})();\n;return Component;"},"_id":"docs/components/forms/input.mdx","_raw":{"sourceFilePath":"docs/components/forms/input.mdx","sourceFileName":"input.mdx","sourceFileDir":"docs/components/forms","contentType":"mdx","flattenedPath":"docs/components/forms/input"},"type":"Doc","slug":"/docs/components/forms/input"}},"__N_SSG":true}