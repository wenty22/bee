{"pageProps":{"doc":{"title":"Portal","body":{"raw":"\n# Portal\n\nPortal is used to transport any component or element to the end of `document.body` and renders a React tree into it.\n\nUseful for rendering a natural React element hierarchy with a different DOM hierarchy to prevent parent styles from clipping or hiding content (for popovers, dropdowns, and modals). It supports nested portals\n\n## Import\n\n```jsx live=false\nimport { Portal } from '@totejs/uikit';\n```\n\n## Usage\n\n```jsx\nfunction Example() {\n  return (\n    <Box bg=\"scene.warning.normal\" color=\"white\">\n      I'm here,\n      <Portal>This text is portaled at the end of document.body!</Portal>\n    </Box>\n  );\n}\n```\n\n### Using a custom container\n\nYou can render the contents within a portal to a different DOM node, instead of the default `document.body`. Pass the `containerRef` prop and set its value to the `ref` of the container you'd like to use.\n\n```jsx\nfunction Example() {\n  const ref = React.useRef();\n  return (\n    <Box bg=\"scene.warning.normal\" color=\"white\">\n      I'm here,\n      <Portal containerRef={ref}>\n        Portal: This text is portaled to the yellow box!\n      </Portal>\n      <Box ref={ref} bg=\"scene.danger.normal\">\n        <div>Container: Hey,</div>\n      </Box>\n    </Box>\n  );\n}\n```\n\n### Nesting Portals\n\nYou can also nest multiple portals within themselves, this will create a nested DOM hierarchy to make it easy to create nested modals, popovers, etc.\n\n```jsx\nfunction Example() {\n  const ref = React.useRef();\n  return (\n    <div>\n      <Portal containerRef={ref}>\n        <Box bg=\"scene.warning.normal\" color=\"white\">\n          Parent: Hey welcome,\n          <Portal>Child: I'm attached to my parent portal</Portal>\n        </Box>\n      </Portal>\n      <Box bg=\"scene.danger.normal\" color=\"white\" ref={ref} />\n    </div>\n  );\n}\n```\n\n### Opting out of portal nesting\n\nIn some cases, you might not want portal nodes to be nested to their parent portals. To opt out of this, pass `appendToParentPortal` and set it to `false`\n\n```jsx\nfunction Example() {\n  const ref = React.useRef();\n  return (\n    <div>\n      <Portal containerRef={ref}>\n        <Box bg=\"scene.warning.normal\" color=\"white\">\n          Parent: Hey welcome,\n          <Portal appendToParentPortal={false}>\n            Child: I'm going to document.body\n          </Portal>\n        </Box>\n      </Portal>\n      <div style={{ background: 'red' }} ref={ref} />\n    </div>\n  );\n}\n```\n\n## Props\n\n<PropsTable\n  data={[\n    {\n      name: 'children',\n      required: true,\n      type: 'ReactNode',\n      default: '',\n      desc: \"The content or node you'll like to portal\",\n    },\n    {\n      name: 'appendToParentPortal',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: \"If true, the portal will check if it is within a parent portal and append itself to the parent's portal node. This provides nesting for portals. If false, the portal will always append to document.body regardless of nesting. It is used to opt out of portal nesting.\",\n    },\n    {\n      name: 'containerRef',\n      required: false,\n      type: 'RefObject<HTMLElement | null>',\n      default: 'document.body',\n      desc: 'The ref to the component where the portal will be attached to.',\n    },\n  ]}\n/>\n","code":"var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var o in e)a(t,o,{get:e[o],enumerable:!0})},i=(t,e,o,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of f(e))!m.call(t,r)&&r!==o&&a(t,r,{get:()=>e[r],enumerable:!(l=p(e,r))||l.enumerable});return t};var P=(t,e,o)=>(o=t!=null?h(u(t)):{},i(e||!t||!t.__esModule?a(o,\"default\",{value:t,enumerable:!0}):o,t)),y=t=>i(a({},\"__esModule\",{value:!0}),t);var c=g((B,s)=>{s.exports=_jsx_runtime});var v={};x(v,{default:()=>R,frontmatter:()=>w});var n=P(c()),w={title:\"Portal\"};function d(t){let e=Object.assign({h1:\"h1\",p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",h3:\"h3\"},t.components),{PropsTable:o}=e;return o||j(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Portal\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Portal is used to transport any component or element to the end of \",(0,n.jsx)(e.code,{children:\"document.body\"}),\" and renders a React tree into it.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Useful for rendering a natural React element hierarchy with a different DOM hierarchy to prevent parent styles from clipping or hiding content (for popovers, dropdowns, and modals). It supports nested portals\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { Portal } from '@totejs/uikit';\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  return (\n    <Box bg=\"scene.warning.normal\" color=\"white\">\n      I'm here,\n      <Portal>This text is portaled at the end of document.body!</Portal>\n    </Box>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Using a custom container\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can render the contents within a portal to a different DOM node, instead of the default \",(0,n.jsx)(e.code,{children:\"document.body\"}),\". Pass the \",(0,n.jsx)(e.code,{children:\"containerRef\"}),\" prop and set its value to the \",(0,n.jsx)(e.code,{children:\"ref\"}),\" of the container you'd like to use.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const ref = React.useRef();\n  return (\n    <Box bg=\"scene.warning.normal\" color=\"white\">\n      I'm here,\n      <Portal containerRef={ref}>\n        Portal: This text is portaled to the yellow box!\n      </Portal>\n      <Box ref={ref} bg=\"scene.danger.normal\">\n        <div>Container: Hey,</div>\n      </Box>\n    </Box>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Nesting Portals\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can also nest multiple portals within themselves, this will create a nested DOM hierarchy to make it easy to create nested modals, popovers, etc.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const ref = React.useRef();\n  return (\n    <div>\n      <Portal containerRef={ref}>\n        <Box bg=\"scene.warning.normal\" color=\"white\">\n          Parent: Hey welcome,\n          <Portal>Child: I'm attached to my parent portal</Portal>\n        </Box>\n      </Portal>\n      <Box bg=\"scene.danger.normal\" color=\"white\" ref={ref} />\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Opting out of portal nesting\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In some cases, you might not want portal nodes to be nested to their parent portals. To opt out of this, pass \",(0,n.jsx)(e.code,{children:\"appendToParentPortal\"}),\" and set it to \",(0,n.jsx)(e.code,{children:\"false\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const ref = React.useRef();\n  return (\n    <div>\n      <Portal containerRef={ref}>\n        <Box bg=\"scene.warning.normal\" color=\"white\">\n          Parent: Hey welcome,\n          <Portal appendToParentPortal={false}>\n            Child: I'm going to document.body\n          </Portal>\n        </Box>\n      </Portal>\n      <div style={{ background: 'red' }} ref={ref} />\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Props\"}),`\n`,(0,n.jsx)(o,{data:[{name:\"children\",required:!0,type:\"ReactNode\",default:\"\",desc:\"The content or node you'll like to portal\"},{name:\"appendToParentPortal\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the portal will check if it is within a parent portal and append itself to the parent's portal node. This provides nesting for portals. If false, the portal will always append to document.body regardless of nesting. It is used to opt out of portal nesting.\"},{name:\"containerRef\",required:!1,type:\"RefObject<HTMLElement | null>\",default:\"document.body\",desc:\"The ref to the component where the portal will be attached to.\"}]})]})}function b(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var R=b;function j(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return y(v);})();\n;return Component;"},"_id":"docs/components/other/portal.mdx","_raw":{"sourceFilePath":"docs/components/other/portal.mdx","sourceFileName":"portal.mdx","sourceFileDir":"docs/components/other","contentType":"mdx","flattenedPath":"docs/components/other/portal"},"type":"Doc","slug":"/docs/components/other/portal"}},"__N_SSG":true}