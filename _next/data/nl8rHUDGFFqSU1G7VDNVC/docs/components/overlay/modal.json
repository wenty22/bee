{"pageProps":{"doc":{"title":"Modal","body":{"raw":"\n# Modal\n\n## Import\n\n```jsx live=false\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from '@totejs/uikit';\n```\n\n## Usage\n\n```jsx\nfunction ModalExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open</Button>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            Sit nulla est ex deserunt exercitation anim occaecat. Nostrud ullamco deserunt aute id\n            consequat veniam incididunt duis in sint irure nisi. Mollit officia cillum Lorem ullamco\n            minim nostrud elit officia tempor esse quis. Sunt ad dolore quis aute consequat. Magna\n            exercitation reprehenderit magna aute tempor cupidatat consequat elit dolor adipisicing.\n            Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit officia eiusmod\n            Lorem aliqua enim laboris do dolor eiusmod. Et mollit incididunt nisi consectetur esse\n            laborum eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.\n          </ModalBody>\n\n          <ModalFooter>\n            <Button mr={12}>Submit</Button>\n            <Button variant=\"ghost\" onClick={onClose}>\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n```\n\n## Modal overflow behavior\n\nIf the content within the modal overflows beyond the viewport, you can use the `scrollBehavior` to\ncontrol how scrolling should happen.\n\n- If set to `inside`, scroll only occurs within the `ModalBody`.\n- If set to `outside`, the entire `ModalContent` will scroll within the viewport.\n\n```jsx\nfunction ScrollingExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [scrollBehavior, setScrollBehavior] = React.useState('inside');\n\n  const btnRef = React.useRef();\n  return (\n    <>\n      <ButtonGroup isAttached size=\"md\" colorScheme=\"warning\">\n        <Button\n          variant={scrollBehavior === 'inside' ? 'scene' : 'ghost'}\n          onClick={() => setScrollBehavior('inside')}\n        >\n          inside\n        </Button>\n        <Button\n          variant={scrollBehavior === 'outside' ? 'scene' : 'ghost'}\n          onClick={() => setScrollBehavior('outside')}\n        >\n          outside\n        </Button>\n      </ButtonGroup>\n\n      <Divider my={12} />\n\n      <Button size=\"md\" onClick={onOpen}>\n        Open\n      </Button>\n      <Modal isOpen={isOpen} onClose={onClose} scrollBehavior={scrollBehavior}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Box h={5000}>\n              Sit nulla est ex deserunt exercitation anim occaecat. Nostrud ullamco deserunt aute id\n              consequat veniam incididunt duis in sint irure nisi. Mollit officia cillum Lorem\n              ullamco minim nostrud elit officia tempor esse quis. Sunt ad dolore quis aute\n              consequat. Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit\n              dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit\n              officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et mollit incididunt nisi\n              consectetur esse laborum eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt\n              nostrud ad veniam.\n            </Box>\n          </ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup spacing=\"12\" size=\"md\">\n              <Button>Submit</Button>\n              <Button variant=\"ghost\" onClick={onClose}>\n                Close\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n```\n\n## Props\n\n<PropsTable\n  data={[\n    {\n      name: 'isOpen',\n      required: true,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the modal will be open.',\n    },\n    {\n      name: 'onClose',\n      required: true,\n      type: '() => void',\n      desc: 'Callback invoked to close the modal.',\n    },\n    {\n      name: 'scrollBehavior',\n      required: false,\n      type: '\"inside\" | \"outside\"',\n      default: '\"outside\"',\n      desc: 'Modal overflow behavior.',\n    },\n    {\n      name: 'closeOnEsc',\n      required: false,\n      type: 'boolean',\n      default: true,\n      desc: 'If true, the modal will close when the Esc key is pressed',\n    },\n    {\n      name: 'closeOnOverlayClick',\n      required: false,\n      type: 'boolean',\n      default: true,\n      desc: 'If true, the modal will close when the overlay is clicked',\n    },\n    {\n      name: 'blockScrollOnMount',\n      required: false,\n      type: 'boolean',\n      default: true,\n      desc: 'If true, scrolling will be disabled on the body when the modal opens.',\n    },\n    {\n      name: 'onEsc',\n      required: false,\n      type: '() => void',\n      desc: 'Callback fired when the escape key is pressed and focus is within modal',\n    },\n    {\n      name: 'onOverlayClick',\n      required: false,\n      type: '() => void',\n      desc: 'Callback fired when the overlay is clicked.',\n    },\n  ]}\n/>\n","code":"var Component=(()=>{var c=Object.create;var l=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var M=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),B=(o,e)=>{for(var t in e)l(o,t,{get:e[t],enumerable:!0})},d=(o,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of h(e))!f.call(o,i)&&i!==t&&l(o,i,{get:()=>e[i],enumerable:!(a=m(e,i))||a.enumerable});return o};var v=(o,e,t)=>(t=o!=null?c(p(o)):{},d(e||!o||!o.__esModule?l(t,\"default\",{value:o,enumerable:!0}):t,o)),C=o=>d(l({},\"__esModule\",{value:!0}),o);var s=M((q,r)=>{r.exports=_jsx_runtime});var w={};B(w,{default:()=>g,frontmatter:()=>y});var n=v(s()),y={title:\"Modal\"};function u(o){let e=Object.assign({h1:\"h1\",h2:\"h2\",pre:\"pre\",code:\"code\",p:\"p\",ul:\"ul\",li:\"li\"},o.components),{PropsTable:t}=e;return t||x(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Modal\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from '@totejs/uikit';\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function ModalExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open</Button>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            Sit nulla est ex deserunt exercitation anim occaecat. Nostrud ullamco deserunt aute id\n            consequat veniam incididunt duis in sint irure nisi. Mollit officia cillum Lorem ullamco\n            minim nostrud elit officia tempor esse quis. Sunt ad dolore quis aute consequat. Magna\n            exercitation reprehenderit magna aute tempor cupidatat consequat elit dolor adipisicing.\n            Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit officia eiusmod\n            Lorem aliqua enim laboris do dolor eiusmod. Et mollit incididunt nisi consectetur esse\n            laborum eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.\n          </ModalBody>\n\n          <ModalFooter>\n            <Button mr={12}>Submit</Button>\n            <Button variant=\"ghost\" onClick={onClose}>\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Modal overflow behavior\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If the content within the modal overflows beyond the viewport, you can use the \",(0,n.jsx)(e.code,{children:\"scrollBehavior\"}),` to\ncontrol how scrolling should happen.`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"If set to \",(0,n.jsx)(e.code,{children:\"inside\"}),\", scroll only occurs within the \",(0,n.jsx)(e.code,{children:\"ModalBody\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If set to \",(0,n.jsx)(e.code,{children:\"outside\"}),\", the entire \",(0,n.jsx)(e.code,{children:\"ModalContent\"}),\" will scroll within the viewport.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function ScrollingExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [scrollBehavior, setScrollBehavior] = React.useState('inside');\n\n  const btnRef = React.useRef();\n  return (\n    <>\n      <ButtonGroup isAttached size=\"md\" colorScheme=\"warning\">\n        <Button\n          variant={scrollBehavior === 'inside' ? 'scene' : 'ghost'}\n          onClick={() => setScrollBehavior('inside')}\n        >\n          inside\n        </Button>\n        <Button\n          variant={scrollBehavior === 'outside' ? 'scene' : 'ghost'}\n          onClick={() => setScrollBehavior('outside')}\n        >\n          outside\n        </Button>\n      </ButtonGroup>\n\n      <Divider my={12} />\n\n      <Button size=\"md\" onClick={onOpen}>\n        Open\n      </Button>\n      <Modal isOpen={isOpen} onClose={onClose} scrollBehavior={scrollBehavior}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Box h={5000}>\n              Sit nulla est ex deserunt exercitation anim occaecat. Nostrud ullamco deserunt aute id\n              consequat veniam incididunt duis in sint irure nisi. Mollit officia cillum Lorem\n              ullamco minim nostrud elit officia tempor esse quis. Sunt ad dolore quis aute\n              consequat. Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit\n              dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit\n              officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et mollit incididunt nisi\n              consectetur esse laborum eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt\n              nostrud ad veniam.\n            </Box>\n          </ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup spacing=\"12\" size=\"md\">\n              <Button>Submit</Button>\n              <Button variant=\"ghost\" onClick={onClose}>\n                Close\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Props\"}),`\n`,(0,n.jsx)(t,{data:[{name:\"isOpen\",required:!0,type:\"boolean\",default:!1,desc:\"If true, the modal will be open.\"},{name:\"onClose\",required:!0,type:\"() => void\",desc:\"Callback invoked to close the modal.\"},{name:\"scrollBehavior\",required:!1,type:'\"inside\" | \"outside\"',default:'\"outside\"',desc:\"Modal overflow behavior.\"},{name:\"closeOnEsc\",required:!1,type:\"boolean\",default:!0,desc:\"If true, the modal will close when the Esc key is pressed\"},{name:\"closeOnOverlayClick\",required:!1,type:\"boolean\",default:!0,desc:\"If true, the modal will close when the overlay is clicked\"},{name:\"blockScrollOnMount\",required:!1,type:\"boolean\",default:!0,desc:\"If true, scrolling will be disabled on the body when the modal opens.\"},{name:\"onEsc\",required:!1,type:\"() => void\",desc:\"Callback fired when the escape key is pressed and focus is within modal\"},{name:\"onOverlayClick\",required:!1,type:\"() => void\",desc:\"Callback fired when the overlay is clicked.\"}]})]})}function b(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(u,o)})):u(o)}var g=b;function x(o,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return C(w);})();\n;return Component;"},"_id":"docs/components/overlay/modal.mdx","_raw":{"sourceFilePath":"docs/components/overlay/modal.mdx","sourceFileName":"modal.mdx","sourceFileDir":"docs/components/overlay","contentType":"mdx","flattenedPath":"docs/components/overlay/modal"},"type":"Doc","slug":"/docs/components/overlay/modal"}},"__N_SSG":true}