{"pageProps":{"doc":{"title":"Drawer","body":{"raw":"\n# Drawer\n\n## Import\n\n```jsx live=false\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n} from '@totejs/uikit';\n```\n\n## Usage\n\n```jsx\nfunction DrawerExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open</Button>\n\n      <Drawer isOpen={isOpen} onClose={onClose}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Title</DrawerHeader>\n\n          <DrawerBody>\n            <Input placeholder=\"Type here...\" />\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button mr={12} size=\"md\">\n              Save\n            </Button>\n            <Button variant=\"ghost\" size=\"md\" onClick={onClose}>\n              Cancel\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n```\n\n## Props\n\n<PropsTable\n  data={[\n    {\n      name: 'isOpen',\n      required: true,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the modal will be open.',\n    },\n    {\n      name: 'onClose',\n      required: true,\n      type: '() => void',\n      desc: 'Callback invoked to close the modal.',\n    },\n    {\n      name: 'closeOnEsc',\n      required: false,\n      type: 'boolean',\n      default: true,\n      desc: 'If true, the modal will close when the Esc key is pressed',\n    },\n    {\n      name: 'closeOnOverlayClick',\n      required: false,\n      type: 'boolean',\n      default: true,\n      desc: 'If true, the modal will close when the overlay is clicked',\n    },\n    {\n      name: 'blockScrollOnMount',\n      required: false,\n      type: 'boolean',\n      default: true,\n      desc: 'If true, scrolling will be disabled on the body when the modal opens.',\n    },\n    {\n      name: 'onEsc',\n      required: false,\n      type: '() => void',\n      desc: 'Callback fired when the escape key is pressed and focus is within modal',\n    },\n    {\n      name: 'onOverlayClick',\n      required: false,\n      type: '() => void',\n      desc: 'Callback fired when the overlay is clicked.',\n    },\n  ]}\n/>\n","code":"var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),D=(n,e)=>{for(var o in e)a(n,o,{get:e[o],enumerable:!0})},s=(n,e,o,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of h(e))!m.call(n,t)&&t!==o&&a(n,t,{get:()=>e[t],enumerable:!(l=p(e,t))||l.enumerable});return n};var y=(n,e,o)=>(o=n!=null?u(w(n)):{},s(e||!n||!n.__esModule?a(o,\"default\",{value:n,enumerable:!0}):o,n)),C=n=>s(a({},\"__esModule\",{value:!0}),n);var d=f((j,i)=>{i.exports=_jsx_runtime});var x={};D(x,{default:()=>k,frontmatter:()=>b});var r=y(d()),b={title:\"Drawer\"};function c(n){let e=Object.assign({h1:\"h1\",h2:\"h2\",pre:\"pre\",code:\"code\"},n.components),{PropsTable:o}=e;return o||v(\"PropsTable\",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{children:\"Drawer\"}),`\n`,(0,r.jsx)(e.h2,{children:\"Import\"}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n} from '@totejs/uikit';\n`})}),`\n`,(0,r.jsx)(e.h2,{children:\"Usage\"}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-jsx\",children:`function DrawerExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open</Button>\n\n      <Drawer isOpen={isOpen} onClose={onClose}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Title</DrawerHeader>\n\n          <DrawerBody>\n            <Input placeholder=\"Type here...\" />\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button mr={12} size=\"md\">\n              Save\n            </Button>\n            <Button variant=\"ghost\" size=\"md\" onClick={onClose}>\n              Cancel\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n`})}),`\n`,(0,r.jsx)(e.h2,{children:\"Props\"}),`\n`,(0,r.jsx)(o,{data:[{name:\"isOpen\",required:!0,type:\"boolean\",default:!1,desc:\"If true, the modal will be open.\"},{name:\"onClose\",required:!0,type:\"() => void\",desc:\"Callback invoked to close the modal.\"},{name:\"closeOnEsc\",required:!1,type:\"boolean\",default:!0,desc:\"If true, the modal will close when the Esc key is pressed\"},{name:\"closeOnOverlayClick\",required:!1,type:\"boolean\",default:!0,desc:\"If true, the modal will close when the overlay is clicked\"},{name:\"blockScrollOnMount\",required:!1,type:\"boolean\",default:!0,desc:\"If true, scrolling will be disabled on the body when the modal opens.\"},{name:\"onEsc\",required:!1,type:\"() => void\",desc:\"Callback fired when the escape key is pressed and focus is within modal\"},{name:\"onOverlayClick\",required:!1,type:\"() => void\",desc:\"Callback fired when the overlay is clicked.\"}]})]})}function O(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(c,n)})):c(n)}var k=O;function v(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return C(x);})();\n;return Component;"},"_id":"docs/components/overlay/drawer.mdx","_raw":{"sourceFilePath":"docs/components/overlay/drawer.mdx","sourceFileName":"drawer.mdx","sourceFileDir":"docs/components/overlay","contentType":"mdx","flattenedPath":"docs/components/overlay/drawer"},"type":"Doc","slug":"/docs/components/overlay/drawer"}},"__N_SSG":true}