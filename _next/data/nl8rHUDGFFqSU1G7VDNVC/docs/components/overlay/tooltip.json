{"pageProps":{"doc":{"title":"Tooltip","body":{"raw":"\n# Tooltip\n\n## Import\n\n```jsx live=false\nimport { Tooltip } from '@totejs/uikit';\n```\n\n## Usage\n\nIf the children of `Tooltip` is a `string`, we should wrap with in a `span`. If the `Tooltip` is\nwrapping a functional component, ensure that the functional component accepts a `ref` using\n`forwardRef`.\n\n```jsx\n<Tooltip\n  content={\n    'If the children of Tooltip is a string, we should wrap with in a span. If the Tooltip is wrapping a functional component, ensure that the functional component accepts a ref using forwardRef.'\n  }\n  placement={['bottom', 'top', 'follow']}\n>\n  <Button>Show Tooltip</Button>\n</Tooltip>\n```\n\n## With arrow\n\n```jsx\n<Tooltip content={'With Arrow'} placement=\"top\" hasArrow>\n  <SunIcon />\n</Tooltip>\n```\n\n## Placement\n\n```jsx\nfunction Example() {\n  const placements = [\n    'auto',\n    'auto-start',\n    'auto-end',\n    'top',\n    'top-start',\n    'top-end',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'right',\n    'right-start',\n    'right-end',\n    'left',\n    'left-start',\n    'left-end',\n  ];\n\n  return (\n    <SimpleGrid columns={3} gap={24}>\n      {placements.map((item, index) => (\n        <Tooltip content={item} placement={item} key={item}>\n          <Button size=\"lg\">{item}</Button>\n        </Tooltip>\n      ))}\n    </SimpleGrid>\n  );\n}\n```\n\n## Disabled\n\n```jsx\n<Wrap>\n  <Tooltip content={'Some text in tooltip.'} isDisabled>\n    <Button isDisabled={true}>Show Tooltip</Button>\n  </Tooltip>\n\n  <Tooltip content={'Some text in tooltip.'} isDisabled>\n    <Button>Show Tooltip</Button>\n  </Tooltip>\n</Wrap>\n```\n\n##\n\n## Props\n\n<PropsTable\n  data={[\n    {\n      name: 'content',\n      required: true,\n      type: 'React.ReactNode',\n      default: '',\n      desc: '',\n    },\n    {\n      name: 'children',\n      required: true,\n      type: 'React.ReactElement',\n      default: '',\n      desc: '',\n    },\n    {\n      name: 'hasArrow',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the tooltip will show an arrow tip',\n    },\n    {\n      name: 'defaultIsOpen',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the tooltip will be initially shown',\n    },\n    {\n      name: 'isOpen',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the tooltip will be shown (in controlled mode)',\n    },\n    {\n      name: 'isDisabled',\n      required: false,\n      type: 'boolean',\n      default: false,\n      desc: '',\n    },\n    {\n      name: 'placement',\n      required: false,\n      type: \"'follow' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'\",\n      default: '',\n      desc: \"Support responsive array, e.g. ['bottom', 'top', 'follow']\",\n    },\n    {\n      name: 'openDelay',\n      required: false,\n      type: 'number',\n      default: '0ms',\n      desc: 'Delay (in ms) before showing the tooltip',\n    },\n    {\n      name: 'closeDelay',\n      required: false,\n      type: 'number',\n      default: '0ms',\n      desc: 'Delay (in ms) before hiding the tooltip',\n    },\n    {\n      name: 'closeOnClick',\n      required: false,\n      type: 'boolean',\n      default: true,\n      desc: 'If true, the tooltip will hide on click',\n    },\n    {\n      name: 'closeOnEsc',\n      required: false,\n      type: 'boolean',\n      default: true,\n      desc: 'If true, the tooltip will hide on pressing Esc key',\n    },\n    {\n      name: 'closeOnMouseDown',\n      required: false,\n      type: 'boolean',\n      default: true,\n      desc: 'If true, the tooltip will hide while the mouse is down',\n    },\n    {\n      name: 'gutter',\n      required: false,\n      type: 'number',\n      default: '8',\n      desc: `The distance or margin between the reference and popper. It is used internally to create an offset modifier. NB: If you define offset prop, it'll override the gutter.`,\n    },\n    {\n      name: 'offset',\n      required: false,\n      type: '[number, number]',\n      default: '',\n      desc: 'The main and cross-axis offset to displace popper element from its reference element.',\n    },\n    {\n      name: 'modifiers',\n      required: false,\n      type: 'Partial<Modifier<string, any>>[]',\n      desc: 'Array of popper.js modifiers. Check the docs to see the list of possible modifiers you can pass. @see Docs https://popper.js.org/docs/v2/modifiers/',\n    },\n    {\n      name: 'onClose',\n      required: false,\n      type: '() => void',\n      default: '',\n      desc: 'Callback to run when the tooltip hides',\n    },\n    {\n      name: 'onOpen',\n      required: false,\n      type: '() => void',\n      default: '',\n      desc: 'Callback to run when the tooltip shows',\n    },\n    {\n      name: 'shouldWrapChildren',\n      required: false,\n      desc: 'If true, the tooltip will wrap its children in a `<span/>` with `tabIndex=0`',\n      type: 'boolean',\n    },\n  ]}\n/>\n","code":"var Component=(()=>{var c=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var o in e)r(n,o,{get:e[o],enumerable:!0})},a=(n,e,o,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of f(e))!m.call(n,i)&&i!==o&&r(n,i,{get:()=>e[i],enumerable:!(l=u(e,i))||l.enumerable});return n};var g=(n,e,o)=>(o=n!=null?c(h(n)):{},a(e||!n||!n.__esModule?r(o,\"default\",{value:n,enumerable:!0}):o,n)),y=n=>a(r({},\"__esModule\",{value:!0}),n);var d=w((k,s)=>{s.exports=_jsx_runtime});var j={};b(j,{default:()=>q,frontmatter:()=>T});var t=g(d()),T={title:\"Tooltip\"};function p(n){let e=Object.assign({h1:\"h1\",h2:\"h2\",pre:\"pre\",code:\"code\",p:\"p\"},n.components),{PropsTable:o}=e;return o||I(\"PropsTable\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{children:\"Tooltip\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Import\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { Tooltip } from '@totejs/uikit';\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Usage\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"If the children of \",(0,t.jsx)(e.code,{children:\"Tooltip\"}),\" is a \",(0,t.jsx)(e.code,{children:\"string\"}),\", we should wrap with in a \",(0,t.jsx)(e.code,{children:\"span\"}),\". If the \",(0,t.jsx)(e.code,{children:\"Tooltip\"}),` is\nwrapping a functional component, ensure that the functional component accepts a `,(0,t.jsx)(e.code,{children:\"ref\"}),` using\n`,(0,t.jsx)(e.code,{children:\"forwardRef\"}),\".\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`<Tooltip\n  content={\n    'If the children of Tooltip is a string, we should wrap with in a span. If the Tooltip is wrapping a functional component, ensure that the functional component accepts a ref using forwardRef.'\n  }\n  placement={['bottom', 'top', 'follow']}\n>\n  <Button>Show Tooltip</Button>\n</Tooltip>\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"With arrow\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`<Tooltip content={'With Arrow'} placement=\"top\" hasArrow>\n  <SunIcon />\n</Tooltip>\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Placement\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const placements = [\n    'auto',\n    'auto-start',\n    'auto-end',\n    'top',\n    'top-start',\n    'top-end',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'right',\n    'right-start',\n    'right-end',\n    'left',\n    'left-start',\n    'left-end',\n  ];\n\n  return (\n    <SimpleGrid columns={3} gap={24}>\n      {placements.map((item, index) => (\n        <Tooltip content={item} placement={item} key={item}>\n          <Button size=\"lg\">{item}</Button>\n        </Tooltip>\n      ))}\n    </SimpleGrid>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Disabled\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`<Wrap>\n  <Tooltip content={'Some text in tooltip.'} isDisabled>\n    <Button isDisabled={true}>Show Tooltip</Button>\n  </Tooltip>\n\n  <Tooltip content={'Some text in tooltip.'} isDisabled>\n    <Button>Show Tooltip</Button>\n  </Tooltip>\n</Wrap>\n`})}),`\n`,(0,t.jsx)(e.h2,{}),`\n`,(0,t.jsx)(e.h2,{children:\"Props\"}),`\n`,(0,t.jsx)(o,{data:[{name:\"content\",required:!0,type:\"React.ReactNode\",default:\"\",desc:\"\"},{name:\"children\",required:!0,type:\"React.ReactElement\",default:\"\",desc:\"\"},{name:\"hasArrow\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the tooltip will show an arrow tip\"},{name:\"defaultIsOpen\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the tooltip will be initially shown\"},{name:\"isOpen\",required:!1,type:\"boolean\",default:!1,desc:\"If true, the tooltip will be shown (in controlled mode)\"},{name:\"isDisabled\",required:!1,type:\"boolean\",default:!1,desc:\"\"},{name:\"placement\",required:!1,type:\"'follow' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'\",default:\"\",desc:\"Support responsive array, e.g. ['bottom', 'top', 'follow']\"},{name:\"openDelay\",required:!1,type:\"number\",default:\"0ms\",desc:\"Delay (in ms) before showing the tooltip\"},{name:\"closeDelay\",required:!1,type:\"number\",default:\"0ms\",desc:\"Delay (in ms) before hiding the tooltip\"},{name:\"closeOnClick\",required:!1,type:\"boolean\",default:!0,desc:\"If true, the tooltip will hide on click\"},{name:\"closeOnEsc\",required:!1,type:\"boolean\",default:!0,desc:\"If true, the tooltip will hide on pressing Esc key\"},{name:\"closeOnMouseDown\",required:!1,type:\"boolean\",default:!0,desc:\"If true, the tooltip will hide while the mouse is down\"},{name:\"gutter\",required:!1,type:\"number\",default:\"8\",desc:\"The distance or margin between the reference and popper. It is used internally to create an offset modifier. NB: If you define offset prop, it'll override the gutter.\"},{name:\"offset\",required:!1,type:\"[number, number]\",default:\"\",desc:\"The main and cross-axis offset to displace popper element from its reference element.\"},{name:\"modifiers\",required:!1,type:\"Partial<Modifier<string, any>>[]\",desc:\"Array of popper.js modifiers. Check the docs to see the list of possible modifiers you can pass. @see Docs https://popper.js.org/docs/v2/modifiers/\"},{name:\"onClose\",required:!1,type:\"() => void\",default:\"\",desc:\"Callback to run when the tooltip hides\"},{name:\"onOpen\",required:!1,type:\"() => void\",default:\"\",desc:\"Callback to run when the tooltip shows\"},{name:\"shouldWrapChildren\",required:!1,desc:\"If true, the tooltip will wrap its children in a `<span/>` with `tabIndex=0`\",type:\"boolean\"}]})]})}function x(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(p,n)})):p(n)}var q=x;function I(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return y(j);})();\n;return Component;"},"_id":"docs/components/overlay/tooltip.mdx","_raw":{"sourceFilePath":"docs/components/overlay/tooltip.mdx","sourceFileName":"tooltip.mdx","sourceFileDir":"docs/components/overlay","contentType":"mdx","flattenedPath":"docs/components/overlay/tooltip"},"type":"Doc","slug":"/docs/components/overlay/tooltip"}},"__N_SSG":true}