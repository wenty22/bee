{"pageProps":{"doc":{"title":"DarkMode","body":{"raw":"\n# DarkMode\n\nIn some occasions, you might want Chakra components to look the same in both light and dark modes.\nTo achieve this, wrap the component in a `LightMode` or `DarkMode` component. Doing this will\noverride the global `colorMode`.\n\n## Import\n\n```jsx live=false\nimport { DarkMode } from '@totejs/uikit';\n```\n\n## Usage\n\n```jsx\nfunction Example() {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  return (\n    <VStack alignItems=\"flex-start\">\n      <Button size=\"sm\" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n\n      <Divider />\n\n      <HStack>\n        <LightMode>\n          <Button size=\"sm\" colorScheme=\"warning\">\n            Light Mode Always\n          </Button>\n          <Text>Some text</Text>\n        </LightMode>\n      </HStack>\n\n      <Divider />\n\n      <HStack>\n        <DarkMode>\n          <Button size=\"sm\" colorScheme=\"danger\">\n            Dark Mode Always\n          </Button>\n          <Text>Some text</Text>\n        </DarkMode>\n      </HStack>\n    </VStack>\n  );\n}\n```\n","code":"var Component=(()=>{var h=Object.create;var c=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var x=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),k=(n,e)=>{for(var t in e)c(n,t,{get:e[t],enumerable:!0})},i=(n,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!M.call(n,r)&&r!==t&&c(n,r,{get:()=>e[r],enumerable:!(a=m(e,r))||a.enumerable});return n};var p=(n,e,t)=>(t=n!=null?h(u(n)):{},i(e||!n||!n.__esModule?c(t,\"default\",{value:n,enumerable:!0}):t,n)),D=n=>i(c({},\"__esModule\",{value:!0}),n);var d=x((_,s)=>{s.exports=_jsx_runtime});var w={};k(w,{default:()=>f,frontmatter:()=>j});var o=p(d()),j={title:\"DarkMode\"};function l(n){let e=Object.assign({h1:\"h1\",p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{children:\"DarkMode\"}),`\n`,(0,o.jsxs)(e.p,{children:[`In some occasions, you might want Chakra components to look the same in both light and dark modes.\nTo achieve this, wrap the component in a `,(0,o.jsx)(e.code,{children:\"LightMode\"}),\" or \",(0,o.jsx)(e.code,{children:\"DarkMode\"}),` component. Doing this will\noverride the global `,(0,o.jsx)(e.code,{children:\"colorMode\"}),\".\"]}),`\n`,(0,o.jsx)(e.h2,{children:\"Import\"}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { DarkMode } from '@totejs/uikit';\n`})}),`\n`,(0,o.jsx)(e.h2,{children:\"Usage\"}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  return (\n    <VStack alignItems=\"flex-start\">\n      <Button size=\"sm\" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n\n      <Divider />\n\n      <HStack>\n        <LightMode>\n          <Button size=\"sm\" colorScheme=\"warning\">\n            Light Mode Always\n          </Button>\n          <Text>Some text</Text>\n        </LightMode>\n      </HStack>\n\n      <Divider />\n\n      <HStack>\n        <DarkMode>\n          <Button size=\"sm\" colorScheme=\"danger\">\n            Dark Mode Always\n          </Button>\n          <Text>Some text</Text>\n        </DarkMode>\n      </HStack>\n    </VStack>\n  );\n}\n`})})]})}function S(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(l,n)})):l(n)}var f=S;return D(w);})();\n;return Component;"},"_id":"docs/components/theme/dark-mode.mdx","_raw":{"sourceFilePath":"docs/components/theme/dark-mode.mdx","sourceFileName":"dark-mode.mdx","sourceFileDir":"docs/components/theme","contentType":"mdx","flattenedPath":"docs/components/theme/dark-mode"},"type":"Doc","slug":"/docs/components/theme/dark-mode"}},"__N_SSG":true}