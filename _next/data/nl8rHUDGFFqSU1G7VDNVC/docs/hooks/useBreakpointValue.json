{"pageProps":{"doc":{"title":"useBreakpointValue","body":{"raw":"\n# useBreakpointValue\n\n`useBreakpointValue` is a custom hook which returns the value for the current breakpoint from the provided responsive values object. This hook also responds to the window resizing and returning the appropriate value for the new window size.\n\n## Import\n\n```jsx live=false\nimport { useBreakpointValue } from '@chakra-ui/react';\n```\n\n## Usage\n\nThe `useBreakpointValue` hook returns the value for the current breakpoint.\n\n```jsx\nfunction Example() {\n  const variant = useBreakpointValue({ base: 'scene', md: 'second' });\n\n  return (\n    <VStack align=\"flex-start\">\n      <Text>Resize your window to see the button variant change</Text>\n      <Button colorScheme=\"warning\" variant={variant}>\n        Button\n      </Button>\n    </VStack>\n  );\n}\n```\n","code":"var Component=(()=>{var l=Object.create;var a=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),k=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},s=(n,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!x.call(n,o)&&o!==r&&a(n,o,{get:()=>e[o],enumerable:!(i=d(e,o))||i.enumerable});return n};var f=(n,e,r)=>(r=n!=null?l(m(n)):{},s(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),v=n=>s(a({},\"__esModule\",{value:!0}),n);var h=g((_,c)=>{c.exports=_jsx_runtime});var V={};k(V,{default:()=>B,frontmatter:()=>j});var t=f(h()),j={title:\"useBreakpointValue\"};function u(n){let e=Object.assign({h1:\"h1\",p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{children:\"useBreakpointValue\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"useBreakpointValue\"}),\" is a custom hook which returns the value for the current breakpoint from the provided responsive values object. This hook also responds to the window resizing and returning the appropriate value for the new window size.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Import\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { useBreakpointValue } from '@chakra-ui/react';\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Usage\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useBreakpointValue\"}),\" hook returns the value for the current breakpoint.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const variant = useBreakpointValue({ base: 'scene', md: 'second' });\n\n  return (\n    <VStack align=\"flex-start\">\n      <Text>Resize your window to see the button variant change</Text>\n      <Button colorScheme=\"warning\" variant={variant}>\n        Button\n      </Button>\n    </VStack>\n  );\n}\n`})})]})}function w(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(u,n)})):u(n)}var B=w;return v(V);})();\n;return Component;"},"_id":"docs/hooks/useBreakpointValue.mdx","_raw":{"sourceFilePath":"docs/hooks/useBreakpointValue.mdx","sourceFileName":"useBreakpointValue.mdx","sourceFileDir":"docs/hooks","contentType":"mdx","flattenedPath":"docs/hooks/useBreakpointValue"},"type":"Doc","slug":"/docs/hooks/useBreakpointValue"}},"__N_SSG":true}