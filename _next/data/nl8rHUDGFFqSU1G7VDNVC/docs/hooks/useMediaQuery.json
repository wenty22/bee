{"pageProps":{"doc":{"title":"useMediaQuery","body":{"raw":"\n# useMediaQuery\n\n`useMediaQuery` is a custom hook used to help detect whether a single media query or multiple media queries individually match.\n\n## Import\n\n```jsx live=false\nimport { useMediaQuery } from '@totejs/uikit';\n```\n\n## Return value\n\nThe `useMediaQuery` hook returns an array of booleans, indicating whether the given query matches or queries match.\n\nWhy an array? `useMediaQuery` accepts both a string and an array of strings, but will always return an array. This way, you can combine multiple media queries which will be individually matched in a single call.\n\n> Keep in mind this API relies on the users browser support of window.matchMedia and will always return false if it is not supported or does not exist (e.g. during serverside rendering).\n\n## Usage\n\n```jsx\nfunction Example() {\n  const [isLargerThan1280] = useMediaQuery('(min-width: 1280px)');\n\n  return (\n    <Text>\n      {isLargerThan1280 ? 'larger than 1280px' : 'smaller than 1280px'}\n    </Text>\n  );\n}\n```\n\n```jsx\nfunction Example() {\n  const [isLargerThanHD, isDisplayingInBrowser] = useMediaQuery([\n    '(min-width: 1920px)',\n    '(display-mode: browser)',\n  ]);\n\n  function determineText() {\n    if (isLargerThanHD) {\n      return `high resolution you got there ${\n        isDisplayingInBrowser ? 'in your browser' : 'on your screen'\n      }`;\n    }\n\n    return isDisplayingInBrowser\n      ? 'rendering in a browser'\n      : 'rendering on something else, e.g. PWA';\n  }\n\n  return <Text>{determineText()}</Text>;\n}\n```\n\n## Arguments\n\n<PropsTable\n  data={[\n    {\n      name: 'query',\n      required: true,\n      type: 'string | string[]',\n      default: '',\n      desc: 'query string or query strings',\n    },\n  ]}\n/>\n\n## Return value\n\n<PropsTable\n  data={[\n    {\n      name: 'media query result',\n      type: 'Array<boolean>',\n      default: '',\n      desc: 'The array of media query result',\n    },\n  ]}\n/>\n","code":"var Component=(()=>{var c=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),x=(r,e)=>{for(var i in e)a(r,i,{get:e[i],enumerable:!0})},o=(r,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!g.call(r,t)&&t!==i&&a(r,t,{get:()=>e[t],enumerable:!(s=h(e,t))||s.enumerable});return r};var f=(r,e,i)=>(i=r!=null?c(p(r)):{},o(e||!r||!r.__esModule?a(i,\"default\",{value:r,enumerable:!0}):i,r)),w=r=>o(a({},\"__esModule\",{value:!0}),r);var l=y((Q,d)=>{d.exports=_jsx_runtime});var j={};x(j,{default:()=>q,frontmatter:()=>b});var n=f(l()),b={title:\"useMediaQuery\"};function u(r){let e=Object.assign({h1:\"h1\",p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",blockquote:\"blockquote\"},r.components),{PropsTable:i}=e;return i||M(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"useMediaQuery\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useMediaQuery\"}),\" is a custom hook used to help detect whether a single media query or multiple media queries individually match.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { useMediaQuery } from '@totejs/uikit';\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useMediaQuery\"}),\" hook returns an array of booleans, indicating whether the given query matches or queries match.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Why an array? \",(0,n.jsx)(e.code,{children:\"useMediaQuery\"}),\" accepts both a string and an array of strings, but will always return an array. This way, you can combine multiple media queries which will be individually matched in a single call.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Keep in mind this API relies on the users browser support of window.matchMedia and will always return false if it is not supported or does not exist (e.g. during serverside rendering).\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [isLargerThan1280] = useMediaQuery('(min-width: 1280px)');\n\n  return (\n    <Text>\n      {isLargerThan1280 ? 'larger than 1280px' : 'smaller than 1280px'}\n    </Text>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [isLargerThanHD, isDisplayingInBrowser] = useMediaQuery([\n    '(min-width: 1920px)',\n    '(display-mode: browser)',\n  ]);\n\n  function determineText() {\n    if (isLargerThanHD) {\n      return \\`high resolution you got there \\${\n        isDisplayingInBrowser ? 'in your browser' : 'on your screen'\n      }\\`;\n    }\n\n    return isDisplayingInBrowser\n      ? 'rendering in a browser'\n      : 'rendering on something else, e.g. PWA';\n  }\n\n  return <Text>{determineText()}</Text>;\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsx)(i,{data:[{name:\"query\",required:!0,type:\"string | string[]\",default:\"\",desc:\"query string or query strings\"}]}),`\n`,(0,n.jsx)(e.h2,{children:\"Return value\"}),`\n`,(0,n.jsx)(i,{data:[{name:\"media query result\",type:\"Array<boolean>\",default:\"\",desc:\"The array of media query result\"}]})]})}function T(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(u,r)})):u(r)}var q=T;function M(r,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return w(j);})();\n;return Component;"},"_id":"docs/hooks/useMediaQuery.mdx","_raw":{"sourceFilePath":"docs/hooks/useMediaQuery.mdx","sourceFileName":"useMediaQuery.mdx","sourceFileDir":"docs/hooks","contentType":"mdx","flattenedPath":"docs/hooks/useMediaQuery"},"type":"Doc","slug":"/docs/hooks/useMediaQuery"}},"__N_SSG":true}