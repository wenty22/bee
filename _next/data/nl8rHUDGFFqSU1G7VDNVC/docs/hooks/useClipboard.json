{"pageProps":{"doc":{"title":"useClipboard","body":{"raw":"\n# useClipboard\n\n`useClipboard` is a custom hook that handles copying content to clipboard.\n\n## Import\n\n```jsx live=false\nimport { useClipboard } from '@chakra-ui/react';\n```\n\n## Usage\n\n```jsx\nfunction Example() {\n  const [value, setValue] = React.useState('Hello world');\n  const { hasCopied, onCopy } = useClipboard(value);\n\n  return (\n    <>\n      <Flex mb={8}>\n        <Input placeholder=\"Paste here\" />\n        <Button onClick={onCopy} ml={8}>\n          {hasCopied ? 'Copied' : 'Copy'}\n        </Button>\n      </Flex>\n    </>\n  );\n}\n```\n\n## Arguments\n\n<PropsTable\n  data={[\n    {\n      name: 'text',\n      type: 'string',\n      required: true,\n      default: '',\n      desc: 'The text or value that is to be copied.',\n    },\n    {\n      name: 'optionsOrTimeout',\n      type: 'number | object',\n      required: false,\n      default: '',\n      desc: 'The timeout as a number or an object containing 2 properties: timeout and format for the MIME type. The timeout is measured in milliseconds and has a default of 1500ms.',\n    },\n  ]}\n/>\n\n## Return value\n\n<PropsTable\n  data={[\n    {\n      name: 'value',\n      type: 'string',\n      default: '',\n      desc: 'The copied value.',\n    },\n    {\n      name: 'onCopy',\n      type: 'function',\n      default: '',\n      desc: 'Callback function to copy content.',\n    },\n    {\n      name: 'hasCopied',\n      type: 'boolean',\n      default: false,\n      desc: 'If true, the content has been copied within the last timeout milliseconds. That is, it is set to true right after onCopy is called, and false after timeout has passed.',\n    },\n  ]}\n/>\n","code":"var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var o in e)r(t,o,{get:e[o],enumerable:!0})},i=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of h(e))!f.call(t,a)&&a!==o&&r(t,a,{get:()=>e[a],enumerable:!(s=p(e,a))||s.enumerable});return t};var C=(t,e,o)=>(o=t!=null?u(m(t)):{},i(e||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),g=t=>i(r({},\"__esModule\",{value:!0}),t);var l=b((k,c)=>{c.exports=_jsx_runtime});var _={};x(_,{default:()=>v,frontmatter:()=>y});var n=C(l()),y={title:\"useClipboard\"};function d(t){let e=Object.assign({h1:\"h1\",p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\"},t.components),{PropsTable:o}=e;return o||T(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"useClipboard\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useClipboard\"}),\" is a custom hook that handles copying content to clipboard.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { useClipboard } from '@chakra-ui/react';\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [value, setValue] = React.useState('Hello world');\n  const { hasCopied, onCopy } = useClipboard(value);\n\n  return (\n    <>\n      <Flex mb={8}>\n        <Input placeholder=\"Paste here\" />\n        <Button onClick={onCopy} ml={8}>\n          {hasCopied ? 'Copied' : 'Copy'}\n        </Button>\n      </Flex>\n    </>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsx)(o,{data:[{name:\"text\",type:\"string\",required:!0,default:\"\",desc:\"The text or value that is to be copied.\"},{name:\"optionsOrTimeout\",type:\"number | object\",required:!1,default:\"\",desc:\"The timeout as a number or an object containing 2 properties: timeout and format for the MIME type. The timeout is measured in milliseconds and has a default of 1500ms.\"}]}),`\n`,(0,n.jsx)(e.h2,{children:\"Return value\"}),`\n`,(0,n.jsx)(o,{data:[{name:\"value\",type:\"string\",default:\"\",desc:\"The copied value.\"},{name:\"onCopy\",type:\"function\",default:\"\",desc:\"Callback function to copy content.\"},{name:\"hasCopied\",type:\"boolean\",default:!1,desc:\"If true, the content has been copied within the last timeout milliseconds. That is, it is set to true right after onCopy is called, and false after timeout has passed.\"}]})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var v=j;function T(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return g(_);})();\n;return Component;"},"_id":"docs/hooks/useClipboard.mdx","_raw":{"sourceFilePath":"docs/hooks/useClipboard.mdx","sourceFileName":"useClipboard.mdx","sourceFileDir":"docs/hooks","contentType":"mdx","flattenedPath":"docs/hooks/useClipboard"},"type":"Doc","slug":"/docs/hooks/useClipboard"}},"__N_SSG":true}